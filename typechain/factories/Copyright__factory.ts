/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Copyright } from "../Copyright";

export class Copyright__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Copyright> {
    return super.deploy(overrides || {}) as Promise<Copyright>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Copyright {
    return super.attach(address) as Copyright;
  }
  connect(signer: Signer): Copyright__factory {
    return super.connect(signer) as Copyright__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Copyright {
    return new Contract(address, _abi, signerOrProvider) as Copyright;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "new_code",
        type: "string",
      },
      {
        internalType: "string",
        name: "unique_code",
        type: "string",
      },
    ],
    name: "checkSimilarity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "similarity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610454806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806327bc5baa1461003b5780638209cfae14610059575b600080fd5b610043610075565b60405161005091906102bd565b60405180910390f35b610073600480360381019061006e91906101a9565b61007b565b005b60005481565b60007399ecdc0ef0935e753b73a2a124e789c6593b09c990508073ffffffffffffffffffffffffffffffffffffffff16634d787d4584846040518363ffffffff1660e01b81526004016100cf929190610286565b602060405180830381600087803b1580156100e957600080fd5b505af11580156100fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101219190610215565b600081905550505050565b600061013f61013a846102fd565b6102d8565b90508281526020810184848401111561015757600080fd5b610162848285610354565b509392505050565b600082601f83011261017b57600080fd5b813561018b84826020860161012c565b91505092915050565b6000815190506101a381610407565b92915050565b600080604083850312156101bc57600080fd5b600083013567ffffffffffffffff8111156101d657600080fd5b6101e28582860161016a565b925050602083013567ffffffffffffffff8111156101ff57600080fd5b61020b8582860161016a565b9150509250929050565b60006020828403121561022757600080fd5b600061023584828501610194565b91505092915050565b60006102498261032e565b6102538185610339565b9350610263818560208601610363565b61026c816103f6565b840191505092915050565b6102808161034a565b82525050565b600060408201905081810360008301526102a0818561023e565b905081810360208301526102b4818461023e565b90509392505050565b60006020820190506102d26000830184610277565b92915050565b60006102e26102f3565b90506102ee8282610396565b919050565b6000604051905090565b600067ffffffffffffffff821115610318576103176103c7565b5b610321826103f6565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610381578082015181840152602081019050610366565b83811115610390576000848401525b50505050565b61039f826103f6565b810181811067ffffffffffffffff821117156103be576103bd6103c7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6104108161034a565b811461041b57600080fd5b5056fea2646970667358221220c9fb93ac82efca3d44b9a69e84336adf342b010f8bfa78594b7420a92d26405e64736f6c63430008030033";
