/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { Token } from "../Token";

export class Token__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Token> {
    return super.deploy(overrides || {}) as Promise<Token>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Token {
    return super.attach(address) as Token;
  }
  connect(signer: Signer): Token__factory {
    return super.connect(signer) as Token__factory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Token {
    return new Contract(address, _abi, signerOrProvider) as Token;
  }
}

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "owner_address",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526040518060400160405280601181526020017f4e6164657220446162697420546f6b656e000000000000000000000000000000815250600090805190602001906200005192919062000246565b506040518060400160405280600381526020017f4e44540000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000246565b50620f4240600255348015620000b457600080fd5b50600254600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555062000174600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166200017a60201b620005101760201c565b620003bd565b6200021a8160405160240162000191919062000307565b6040516020818303038152906040527f2c2ecbc2000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200021d60201b60201c565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b828054620002549062000358565b90600052602060002090601f016020900481019282620002785760008555620002c4565b82601f106200029357805160ff1916838001178555620002c4565b82800160010185558215620002c4579182015b82811115620002c3578251825591602001919060010190620002a6565b5b509050620002d39190620002d7565b5090565b5b80821115620002f2576000816000905550600101620002d8565b5090565b620003018162000324565b82525050565b60006020820190506200031e6000830184620002f6565b92915050565b6000620003318262000338565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060028204905060018216806200037157607f821691505b602082108114156200038857620003876200038e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b610a2f80620003cd6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638da5cb5b1161005b5780638da5cb5b146100ee57806395d89b411461010c578063a9059cbb1461012a578063e8240ef9146101465761007d565b806306fdde031461008257806318160ddd146100a057806370a08231146100be575b600080fd5b61008a610176565b604051610097919061078f565b60405180910390f35b6100a8610204565b6040516100b591906107d1565b60405180910390f35b6100d860048036038101906100d39190610695565b61020a565b6040516100e591906107d1565b60405180910390f35b6100f6610303565b6040516101039190610774565b60405180910390f35b610114610329565b604051610121919061078f565b60405180910390f35b610144600480360381019061013f91906106be565b6103b7565b005b610160600480360381019061015b9190610695565b6104e9565b60405161016d91906107d1565b60405180910390f35b6000805461018390610901565b80601f01602080910402602001604051908101604052809291908181526020018280546101af90610901565b80156101fc5780601f106101d1576101008083540402835291602001916101fc565b820191906000526020600020905b8154815290600101906020018083116101df57829003601f168201915b505050505081565b60025481565b600061024a6040518060400160405280600681526020017f6f207661616900000000000000000000000000000000000000000000000000008152506105a9565b61025382610510565b61027e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610510565b6102bc6040518060400160405280600681526020017f6f207661616900000000000000000000000000000000000000000000000000008152506105a9565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6001805461033690610901565b80601f016020809104026020016040519081016040528092919081815260200182805461036290610901565b80156103af5780601f10610384576101008083540402835291602001916103af565b820191906000526020600020905b81548152906001019060200180831161039257829003601f168201915b505050505081565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610439576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610430906107b1565b60405180910390fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610488919061085e565b9250508190555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104de9190610808565b925050819055505050565b600060028014156104fd576001905061050b565b61050682610510565b600290505b919050565b6105a6816040516024016105249190610774565b6040516020818303038152906040527f2c2ecbc2000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610642565b50565b61063f816040516024016105bd919061078f565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610642565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b60008135905061067a816109cb565b92915050565b60008135905061068f816109e2565b92915050565b6000602082840312156106a757600080fd5b60006106b58482850161066b565b91505092915050565b600080604083850312156106d157600080fd5b60006106df8582860161066b565b92505060206106f085828601610680565b9150509250929050565b61070381610892565b82525050565b6000610714826107ec565b61071e81856107f7565b935061072e8185602086016108ce565b61073781610991565b840191505092915050565b600061074f6011836107f7565b915061075a826109a2565b602082019050919050565b61076e816108c4565b82525050565b600060208201905061078960008301846106fa565b92915050565b600060208201905081810360008301526107a98184610709565b905092915050565b600060208201905081810360008301526107ca81610742565b9050919050565b60006020820190506107e66000830184610765565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610813826108c4565b915061081e836108c4565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561085357610852610933565b5b828201905092915050565b6000610869826108c4565b9150610874836108c4565b92508282101561088757610886610933565b5b828203905092915050565b600061089d826108a4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156108ec5780820151818401526020810190506108d1565b838111156108fb576000848401525b50505050565b6000600282049050600182168061091957607f821691505b6020821081141561092d5761092c610962565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f4e6f7420656e6f75676820746f6b656e73000000000000000000000000000000600082015250565b6109d481610892565b81146109df57600080fd5b50565b6109eb816108c4565b81146109f657600080fd5b5056fea2646970667358221220f1aa16d2478da1be4de7a0ed4120bd60d8497dff7e9e54629adc8cd53ecd09a764736f6c63430008030033";
